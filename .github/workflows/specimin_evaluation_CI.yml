name: specimin_evaluation_CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  specimin-evaluation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          sudo apt-get update
          sudo apt-get install -y jq curl bc

          previous_run_accuracy=$(curl -s -H "Authorization: token ${{ secrets.UPDATE_VARIABLE_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/variables/LATEST_SPECIMIN_EVAL_PERCENTAGE" \
          | jq -r '.value')
          if [ -z "$previous_run_accuracy" ]; then
            previous_run_accuracy="0%"
          fi
          echo "Previous run accuracy: $previous_run_accuracy"

      - name: Display CSV File Contents
        run: |
          CSV_PATH="/home/runner/work/specimin/specimin/CI_repository_list.csv"
          if [ -f "$CSV_PATH" ]; then
            cat "$CSV_PATH"
          else
            echo "File $CSV_PATH does not exist"
            exit 1
          fi

      - name: Download git-clone-related and dependencies
        run: |
          curl -L -o git-clone-related https://raw.githubusercontent.com/plume-lib/git-scripts/main/git-clone-related
          curl -L -o git-find-fork https://raw.githubusercontent.com/plume-lib/git-scripts/main/git-find-fork
          curl -L -o git-find-branch https://raw.githubusercontent.com/plume-lib/git-scripts/main/git-find-branch
          chmod +x git-clone-related git-find-fork git-find-branch

      - name: Clone ASHE Project using git-clone-related
        run: |
          ./git-clone-related njit-jerse ASHE_Automated-Software-Hardening-for-Entrypoints ASHE

      - name: List Files in ASHE Directory
        run: |
          set -ex
          ls -l ASHE

      - name: Check and Rename Properties File
        run: |
          set -ex
          CONFIG_PATH="ASHE/src/main/resources/config.properties"
          EXAMPLE_PATH="ASHE/src/main/resources/example.properties"

          if [ -f "$CONFIG_PATH" ]; then
            echo "config.properties already exists"
          elif [ -f "$EXAMPLE_PATH" ]; then
            echo "example.properties found, renaming to config.properties"
            mv "$EXAMPLE_PATH" "$CONFIG_PATH"
            if [ -f "$CONFIG_PATH" ]; then
              echo "config.properties created successfully"
            else
              echo "Failed to create config.properties"
              exit 1
            fi
          else
            echo "Neither config.properties nor example.properties found"
            exit 1
          fi

          chmod +w "$CONFIG_PATH"
          ls -l "$CONFIG_PATH"

      - name: Update ASHE Config File to update SPECIMIN path
        run: |
          set -ex
          sed -i 's|^specimin.tool.path=.*|specimin.tool.path='$(pwd)'|' ASHE/src/main/resources/config.properties

      - name: Make all scripts under ashe_scripts executable
        run: |
          set -ex
          chmod +x ashe_scripts/*.py

      - name: List Files in ashe_scripts for Debugging
        run: |
          set -ex
          ls -l ashe_scripts

      - name: Run the script
        run: |
          set -ex
          python3 ashe_scripts/run_ashe_for_stats.py \
            $(pwd)/ASHE \
            $(pwd)/CI_repository_list.csv \
            $(pwd)/ASHE/CI_REPO_CLONE_SPACE \
            $(pwd)/ASHE/src/main/resources/config.properties

      - name: Parse accuracy percentage
        id: parse_accuracy_percentage
        run: |
          current_accuracy=$(grep 'Fully successful from minimization to compilation' "$(pwd)/ASHE/logs/specimin_statistics.txt" | awk '{print $NF}' | tr -d '()%')
          echo "Current accuracy: $current_accuracy"
          echo "::set-output name=current_accuracy::$current_accuracy"

      - name: Read, update, and set Evaluation Accuracy Variable
        id: read_update_set_variable
        run: |
          current_accuracy="${{ steps.parse_accuracy_percentage.outputs.current_accuracy }}"
          previous_run_accuracy=$(curl -s -H "Authorization: token ${{ secrets.UPDATE_VARIABLE_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/LATEST_SPECIMIN_EVAL_PERCENTAGE" \
            | jq -r '.value' | tr -d '()%')
          if [ -z "$previous_run_accuracy" ]; then
            previous_run_accuracy=0
          fi
          echo "Previous run accuracy: $previous_run_accuracy"
          
          if (( $(echo "$current_accuracy > $previous_run_accuracy" | bc -l) )); then
            echo "Updating variable since current accuracy > previous run accuracy."
            echo "::set-output name=update_needed::true"
            echo "::set-output name=new_accuracy::$current_accuracy"
          elif (( $(echo "$current_accuracy == $previous_run_accuracy" | bc -l) )); then
            echo "No change in accuracy."
            echo "::set-output name=update_needed::false"
          else
            echo "Current accuracy is less than previous run accuracy."
            exit 1

      - name: Update GitHub Variable
        if: ${{ steps.read_update_set_variable.outputs.update_needed == 'true' }} && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          repo_name="${{ github.repository }}"
          api_url="https://api.github.com"
          new_accuracy="${{ steps.read_update_set_variable.outputs.new_accuracy }}"
          public_key_response=$(curl -s -H "Authorization: token ${{ secrets.UPDATE_VARIABLE_TOKEN }}" $api_url/repos/$repo_name/actions/variables/public-key)
          public_key=$(echo $public_key_response | jq -r .key)
          key_id=$(echo $public_key_response | jq -r .key_id)
          encrypted_value=$(echo -n "$new_accuracy" | openssl pkeyutl -encrypt -pubin -inkey <(echo "$public_key") | base64)
          curl -s \
            -X PUT \
            -H "Authorization: token ${{ secrets.UPDATE_VARIABLE_TOKEN }}" \
            -H "Content-Type: application/json" \
            "$api_url/repos/$repo_name/actions/variables/LATEST_SPECIMIN_EVAL_PERCENTAGE" \
            -d "{\"encrypted_value\":\"$encrypted_value\",\"key_id\":\"$key_id\"}"
